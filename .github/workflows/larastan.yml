name: Static Analysis with Larastan

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  issues: write
  pull-requests: write

jobs:
  larastan:
    name: Static Analysis with Larastan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, fileinfo, dom, curl
          coverage: none
          tools: composer:v2

      - name: Install Dependencies
        run: |
          composer install --no-interaction --prefer-dist --no-progress
          composer require larastan/larastan --dev --no-interaction

      - name: Create Larastan Config
        run: |
          if [ ! -f phpstan.neon ]; then
            echo "includes:
              - ./vendor/larastan/larastan/extension.neon
              - ./vendor/nesbot/carbon/extension.neon

            parameters:
              paths:
                - app/

              level: 8
              checkMissingIterableValueType: false" >> phpstan.neon
          fi

      - name: Run Larastan
        run: |
          # Run analysis and capture output
          OUTPUT=$(vendor/bin/phpstan analyse --error-format=json 2>&1 || true)
          echo "RESULTS=$(echo $OUTPUT | jq -c .)" >> $GITHUB_ENV

      - name: Process and Comment Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const results = process.env.RESULTS ? JSON.parse(process.env.RESULTS) : {errors: []};
            let comment = '## Larastan Results\n\n';

            if (results.errors && results.errors.length > 0) {
              comment += 'Found issues:\n```\n';
              results.errors.slice(0, 5).forEach(error => {
                comment += `${error.message}\n`;
                if (error.location) {
                  comment += `at ${error.location.path}:${error.location.start.line}\n\n`;
                }
              });
              comment += '```\n';
              if (results.errors.length > 5) {
                comment += `Plus ${results.errors.length - 5} more issues...`;
              }
            } else {
              comment += 'âœ… No issues found!';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
